<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Reset Test" id="2" localization="8" tooltip="テストに関する情報をリセットします。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="100" y="39">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        keys = [key for key in memory.getDataListName() if key.startswith("com_github_yacchin1205_pepper_web_boxes_test/")]
        for key in keys:
            memory.removeData(key)
        self.logger.info("Remove Keys: %s" % keys)
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" />
                        </Box>
                        <Box name="Report Test" id="4" localization="8" tooltip="テストに関する情報を報告します。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1322" y="48">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        keyPrefix = "com_github_yacchin1205_pepper_web_boxes_test/"
        keys = [key for key in memory.getDataListName() if key.startswith(keyPrefix)]
        values = {}
        for key in keys:
            values[key[len(keyPrefix):]] = memory.getData(key)
        for key in keys:
            memory.removeData(key)

        failure = [key for (key, value) in values.items() if value == "Failure"]
        success = [key for (key, value) in values.items() if value == "Success"]
        self.logger.info("Test Result: %s" % values)
        if len(failure) + len(success) == 0:
            self.logger.error("No tests")
        elif len(failure) > 0:
            self.logger.error("Failure: %d, Success: %d" % (len(failure), len(success)))
        else:
            self.logger.info("Success: %d" % (len(success)))
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" />
                        </Box>
                        <Box name="TestError" id="1" localization="8" tooltip="" x="387" y="37">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Assert Contains" id="3" localization="8" tooltip="Stringが含まれることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="307" y="143">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.getParameter("Expected") not in self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: Expected '%s' is not in actual '%s'" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="No bindings" default_value="" custom_choice="0" tooltip="出力に含まれるべき文字列。" id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="305" y="28">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait For Signals" id="1" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="575" y="63">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="MQTT Adapter" id="2" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="115" y="26">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                    <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                    <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                    <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                    <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="119" y="192">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="3" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="3" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="TestStop" id="3" localization="8" tooltip="" x="537" y="37">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="MQTT Adapter" id="3" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="670" y="18">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Test1:mqtt/test1" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                    <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                    <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                    <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                    <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                    <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                </Box>
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Get Parameter" id="1" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="90" y="13">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Host" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="271" y="114">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="10" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Bang" id="2" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="657" y="293">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="657" y="402">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (1)" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="475" y="313">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="883" y="348">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Assert Bang (1)" id="8" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1238" y="46">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (2)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1026" y="346">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (3)" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1243" y="343">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="7" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                            <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Text Edit" id="5" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="112" y="183">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("192.168.1.27")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[192.168.1.27]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Box name="TestSingleStatic" id="6" localization="8" tooltip="" x="692" y="42">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Assert Bang (1)" id="8" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1042" y="185">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (2)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="711" y="45">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (3)" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="895" y="44">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="MQTTAdapters" id="24" localization="8" tooltip="こちらに概要を記入" x="111" y="227">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Get Parameter_onGet" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="MQTT Adapter_onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="MQTTAdapter_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="WaitForSignals2_signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="MQTT Adapter" id="3" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="689" y="22">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Test1a:mqtt/test1" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Get Parameter" id="1" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="322" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                                    <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                                    <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Host" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="284" y="381">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Assert Bang" id="2" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="141">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="250">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait (1)" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="504" y="427">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1247" y="276">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="MQTT Adapter (1)" id="11" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="682" y="366">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Test1b:mqtt/test1" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Assert Bang (2)" id="12" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="507">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang (1)" id="13" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="616">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1246" y="429">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="15" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1428" y="360">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1359" y="79">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="15" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="TestOnce" id="3" localization="8" tooltip="こちらに概要を記入" x="318" y="36">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="197" y="182">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="197" y="54">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="330" y="57">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="598" y="50">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="790" y="193">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="798" y="45">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="510" y="301">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="791" y="295">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1069" y="201">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="TestTwice" id="1" localization="8" tooltip="こちらに概要を記入" x="479" y="35">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="200" y="176">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="197" y="54">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="330" y="57">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="617" y="50">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1462" y="173">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1222" y="40">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="513" y="295">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1463" y="275">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="2" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1741" y="181">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Text Edit (1)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="799" y="48">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="1086" y="41">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="24" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="8" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="24" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="24" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Init" id="7" localization="8" tooltip="" x="244" y="36">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="268" y="55">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Raise Event (1)" id="1" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="418" y="54">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Raise Event (2)" id="2" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="115" y="54">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Raise Event (3)" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="644" y="54">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Raise Event (4)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="794" y="53">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="21" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="21" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="4" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="TestSingleDynamically" id="8" localization="8" tooltip="" x="848" y="45">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Assert Bang (1)" id="8" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1259" y="166">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (2)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="773" y="34">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (3)" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="957" y="31">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="MQTTAdapters" id="24" localization="8" tooltip="こちらに概要を記入" x="328" y="208">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Get Parameter_onGet" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="MQTT Adapter_onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="MQTTAdapter_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="WaitForSignals2_signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="MQTT Adapter" id="3" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="689" y="22">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Test1a:mqtt/test1" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Get Parameter" id="1" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="322" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                                    <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                                    <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Host" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="284" y="381">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Assert Bang" id="2" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="141">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="250">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait (1)" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="504" y="427">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1247" y="276">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="MQTT Adapter (1)" id="11" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="682" y="366">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Test1b:mqtt/test1" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Assert Bang (2)" id="12" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="507">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang (1)" id="13" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="616">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1246" y="429">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="15" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1428" y="360">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1359" y="79">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="15" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="TestTwice" id="1" localization="8" tooltip="こちらに概要を記入" x="496" y="34">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="200" y="176">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="197" y="54">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="330" y="57">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="617" y="50">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1462" y="173">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1222" y="40">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="513" y="295">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1463" y="275">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="2" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1741" y="181">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Text Edit (1)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="799" y="48">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="1086" y="41">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Remove Data / Event" id="4" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="205" y="38">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Remove Data / Event (1)" id="2" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="70" y="40">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="TestRemove" id="3" localization="8" tooltip="こちらに概要を記入" x="622" y="31">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="373" y="208">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="370" y="64">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="503" y="67">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="769" y="58">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1657" y="195">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1448" y="63">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="686" y="305">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1658" y="297">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1861" y="196">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Text Edit (1)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1025" y="71">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="1312" y="64">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Remove Data / Event" id="5" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="224" y="58">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1b" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Remove Data / Event (1)" id="6" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="89" y="60">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Test1a" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Wait" id="8" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="900" y="66">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="24" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="24" indexofoutput="5" />
                                            <Link inputowner="24" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="TestMultiStatic" id="9" localization="8" tooltip="" x="1001" y="46">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Assert Bang (1)" id="8" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1042" y="185">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (2)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="711" y="45">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (3)" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="895" y="44">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="MQTTAdapters" id="24" localization="8" tooltip="こちらに概要を記入" x="111" y="227">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Get Parameter_onGet" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="MQTT Adapter_onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="MQTTAdapter_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="WaitForSignals2_signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="MQTT Adapter" id="3" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="689" y="22">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/#:mqtt/group1/#" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Get Parameter" id="1" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="322" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                                    <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                                    <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Host" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="284" y="381">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Assert Bang" id="2" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="141">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="250">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait (1)" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="504" y="427">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1247" y="276">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="MQTT Adapter (1)" id="11" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="682" y="366">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/#:mqtt/group1/#" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Assert Bang (2)" id="12" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="507">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang (1)" id="13" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="616">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1246" y="429">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="15" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1428" y="360">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1359" y="79">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="15" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="TestOnce" id="3" localization="8" tooltip="こちらに概要を記入" x="318" y="36">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="197" y="182">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="197" y="54">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="330" y="57">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="598" y="50">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="790" y="193">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="798" y="45">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="510" y="301">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="791" y="295">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1069" y="201">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="TestTwice" id="1" localization="8" tooltip="こちらに概要を記入" x="479" y="35">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="200" y="176">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="197" y="54">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="330" y="57">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="617" y="50">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1462" y="173">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1222" y="40">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="513" y="295">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1463" y="275">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="2" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1741" y="181">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Text Edit (1)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="799" y="48">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="1086" y="41">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="24" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="8" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="24" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="24" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="TestMultiDynamically" id="10" localization="8" tooltip="" x="1157" y="49">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                            <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Assert Bang (1)" id="8" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1259" y="166">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (2)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="773" y="34">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (3)" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="957" y="31">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="MQTTAdapters" id="24" localization="8" tooltip="こちらに概要を記入" x="328" y="208">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Get Parameter_onGet" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Input name="MQTT Adapter_onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Output name="MQTTAdapter_onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                <Output name="WaitForSignals2_signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="MQTT Adapter" id="3" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="689" y="22">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/#:mqtt/group1/#" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Get Parameter" id="1" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="322" y="13">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                                    <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                                    <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Host" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                                                </Box>
                                                                <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="284" y="381">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Assert Bang" id="2" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="141">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="687" y="250">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait (1)" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="504" y="427">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1247" y="276">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="MQTT Adapter (1)" id="11" localization="8" tooltip="MQTT Adapter for ALMemory.&#x0A;&#x0A;ALMemory用のMQTTアダプタです。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="682" y="366">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" />
                                                                    <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" />
                                                                    <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="Host" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーのホスト名です。" id="7" />
                                                                    <Parameter name="Port" inherits_from_parent="0" content_type="1" value="1883" default_value="1883" min="0" max="99999" tooltip="MQTTブローカーのポート番号です。" id="8" />
                                                                    <Parameter name="Username" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="MQTTブローカーに接続する際のユーザー名です。" id="9" />
                                                                    <Parameter name="Password" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" password="1" tooltip="MQTTブローカーに接続する際のパスワードです。" id="10" />
                                                                    <Parameter name="Key-Topic Bindings" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/#:mqtt/group1/#" default_value="" custom_choice="0" tooltip="ALMemoryのKeyとMQTTのTopicの対応づけを定義します。&#x0A;&#x0A;特定のキーのみを関連づける場合は、&#x0A;ALMemoryのキー:MQTTのトピック&#x0A;&#x0A;特定のキー以下の項目をすべて関連づける場合は、&#x0A;ALMemoryのキー/#:MQTTのトピック/#&#x0A;&#x0A;などと記述します。&#x0A;&#x0A;また、:json, :strなどと付加することで、ALMemoryにマッピングする際の型の変換をおこなうことができます。&#x0A;&#x0A;複数の対応づけを定義する場合はセミコロン(;)で区切ります。" id="11" />
                                                                    <Timeline enable="0">
                                                                        <BehaviorLayer name="behavior_layer1">
                                                                            <BehaviorKeyframe name="keyframe1" index="1">
                                                                                <Diagram>
                                                                                    <Box name="MQTTAdapterImpl" id="1" localization="8" tooltip="MQTTアダプターの実装コードです。&#x0A;&#x0A;パラメータに添付ファイルが定義されているため、インポート時にこのファイルがビヘイビアにインポートされます。" x="267" y="68">
                                                                                        <bitmap>media/images/box/box-python-script.png</bitmap>
                                                                                        <script language="4">
                                                                                            <content>
                                                                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        self.folderName = None
        self.client = None
        self.running = False
        self.mappers = None
        self.memory = None
        self.keyAddedId = None
        self.keyRemovedId = None

    def onUnload(self):
        with self.lock:
            if self.keyAddedId:
                self.memory.subscriber('ALMemory/KeyAdded').signal.disconnect(self.keyAddedId)
                self.keyAddedId = None
            if self.keyRemovedId:
                self.memory.subscriber('ALMemory/KeyRemoved').signal.disconnect(self.keyRemovedId)
                self.keyRemovedId = None

            for mapper in self.mappers:
                mapper.unsubscribe()
            self.mappers = []
            self.running = False
            self.client = None
            import sys
            if self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)
            self.folderName = None
            self.memory = None

    def onInput_onStart(self):
        with self.lock:
            if self.running:
                return
            self.running = True
            self.memory = self.session().service('ALMemory')

            # モジュールの読み込み
            self.logger.debug('Loading modules...')
            import os, sys
            self.folderName = os.path.join(self.behaviorAbsolutePath())
            if self.folderName not in sys.path:
                sys.path.append(self.folderName)
            if 'paho' in sys.modules:
                self.logger.info("Already Loaded: %s" % (sys.modules['paho'].__file__))
                reload(sys.modules['paho'])

            # MQTTクライアントの初期化
            import paho.mqtt.client as mqtt
            self.client = mqtt.Client()
            self.client.on_connect = self.onConnect
            self.client.on_message = self.onMessage
            self.logger.debug('Modules loaded successfully. connecting to the broker...')

            # マッピング定義の解析
            bindings = self.getParameter('Key-Topic Bindings')
            if not bindings:
                raise ValueError('No bindings')

            self.mappers = map(lambda x: self.MapperDef(self.logger, x),
                               bindings.split(';'))
            for mapper in self.mappers:
                mapper.subscribe(self.memory, self.client)
            if not self.keyAddedId:
                self.keyAddedId = self.memory.subscriber('ALMemory/KeyAdded').signal.connect(self.onKeyAdded)
            if not self.keyRemovedId:
                self.keyRemovedId = self.memory.subscriber('ALMemory/KeyRemoved').signal.connect(self.onKeyRemoved)

        import threading
        threading.Thread(target=self.run).start()

    def onKeyAdded(self, name):
        self.logger.debug('KeyAdded: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.subscribe(self.memory, self.client, name)

    def onKeyRemoved(self, name):
        self.logger.debug('KeyRemoved: {}'.format(name))
        for mapper in self.mappers:
            if mapper.isKeyMatched(name):
                mapper.unsubscribe(name)


    def onConnect(self, client, userdata, flags, rc):
        self.logger.info("Connected with result code "+str(rc))
        for mapper in self.mappers:
            client.subscribe(mapper.mqttTopic)

    def onMessage(self, client, userdata, msg):
        self.logger.debug('onMessage({0}): {1}'.format(msg.topic, str(msg.payload)))
        for mapper in self.mappers:
            if mapper.isTopicMatched(msg.topic):
                mapper.onMessage(self.memory, msg.topic, msg.payload)

    def run(self):
        self.logger.debug('Starting worker...')
        import qi
        import sys
        client = self.client
        try:
            username = self.getParameter('Username')
            if username:
                client.username_pw_set(username,
                                            self.getParameter('Password'))
            client.connect(self.getParameter('Host'),
                                self.getParameter('Port'))
            qi.async(self.onConnected)
            self.logger.info('Connected')

            # MQTTの待機処理を開始する
            try:
                while self.running:
                    client.loop()
            finally:
                self.logger.debug('Worker finished')
        except IOError as (errno, strerror):
            errormsg = 'IO Error({0}) occured: {1}'.format(errno, strerror)
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        except:
            errormsg = 'Unexpected Error occured: {}'.format(str(sys.exc_info()[0]))
            self.logger.warn(errormsg)
            qi.async(self.onError, errormsg)
        finally:
            client.disconnect()
            self.logger.info('Disconnected')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    # MQTT・ALMemoryのトピック・キーの対応づけ管理
    class MapperDef(object):

        subscribers = {}

        def __init__(self, logger, targetDef):
            self.logger = logger
            self.fromMemory = self.Histories(logger)
            self.fromMQTT = self.Histories(logger)

            values = targetDef.split(':')
            if len(values) == 2:
                self.memoryKey, self.mqttTopic = values
                self.format = self.NoFormat()
            elif len(values) == 3:
                self.memoryKey, self.mqttTopic, formatName = values
                if formatName == 'str':
                    self.format = self.StrFormat()
                elif formatName == 'json':
                    self.format = self.JsonFormat(logger)
                else:
                    self.logger.warn('Unknown format: {0}'.format(formatName))
                    self.format = self.NoFormat()
            else:
                raise ValueError('Invalid binding: {0}'.format(targetDef))

            if self.mqttTopic.endswith('/#') or self.memoryKey.endswith('/#'):
                if not self.mqttTopic.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.mqttTopic))
                if not self.memoryKey.endswith('/#'):
                    raise ValueError('末尾が/#ではありません: {0}'.format(self.memoryKey))

        def unsubscribe(self, key=None):
            if key:
                if key in self.subscribers:
                    self.subscribers[key].disconnect()
                    del self.subscribers[key]
            else:
                for subscriber in self.subscribers.values():
                    subscriber.disconnect()
                self.subscribers = {}

        def isTopicMatched(self, topic):
            if self.mqttTopic.endswith('/#'):
                return topic.startswith(self.mqttTopic[:-2])
            else:
                return topic == self.mqttTopic

        def isKeyMatched(self, key):
            if self.memoryKey.endswith('/#'):
                return key.startswith(self.memoryKey[:-2])
            else:
                return key == self.memoryKey

        def toTopic(self, key):
            assert(self.isKeyMatched(key))
            if self.memoryKey.endswith('/#'):
                return self.mqttTopic[:-1] + key[len(self.memoryKey) - 1:]
            else:
                return self.mqttTopic

        def toKey(self, topic):
            assert(self.isTopicMatched(topic))
            if self.mqttTopic.endswith('/#'):
                return self.memoryKey[:-1] + topic[len(self.mqttTopic) - 1:]
            else:
                return self.memoryKey

        def subscribe(self, memory, client, addedKey=None):
            if self.memoryKey.endswith('/#'):
                if addedKey:
                    if self.isKeyMatched(addedKey) and addedKey not in self.subscribers:
                        self.subscribers[addedKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT,              memory, client, addedKey, self.toTopic(addedKey), self.format)
                else:
                    for key in memory.getEventList():
                        if self.isKeyMatched(key) and key not in self.subscribers:
                            self.subscribers[key] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, key, self.toTopic(key), self.format)
            elif self.memoryKey not in self.subscribers:
                self.subscribers[self.memoryKey] = self.Subscriber(self.logger, self.fromMemory, self.fromMQTT, memory, client, self.memoryKey, self.mqttTopic, self.format)

        def onMessage(self, memory, topic, payload):
            import qi
            if not self.fromMemory.contains(topic):
                # 自分以外からMQTT経由で来たメッセージとみなす
                self.fromMQTT.put(self.toKey(topic))
                qi.async(self.raiseEvent, memory, topic, payload)
            else:
                # 自身がPublishしたメッセージとみなす
                self.logger.debug('Ignore Message: {0}'.format(topic))

        def raiseEvent(self, memory, topic, payload):
            targetKey = self.toKey(topic)
            self.logger.debug('Raise event: {0}'.format(targetKey))
            value = self.format.convertMQTTToALMemory(payload)
            memory.raiseEvent(targetKey, value)

        class NoFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return payload

            def convertALMemoryToMQTT(self, value):
                if isinstance(value, long):
                    return int(value)
                else:
                    return value

        class StrFormat(object):
            def __init__(self):
                pass

            def convertMQTTToALMemory(self, payload):
                return str(payload)

            def convertALMemoryToMQTT(self, value):
                return str(value)

        # 値の変換処理
        class JsonFormat(object):
            def __init__(self, logger):
                self.logger = logger

            def convertMQTTToALMemory(self, payload):
                import json
                try:
                    return json.loads(payload)
                except:
                    errormsg = 'Unexpected Error occured: {0} when parsing {1}'.format(str(sys.exc_info()[0]), str(payload))
                    self.logger.warn(errormsg)
                    return payload

            def convertALMemoryToMQTT(self, value):
                import json
                try:
                    # ALMemoryはdictを自動的に [[k1, v1], [k2, v2], ...] の形式にしてしまうので
                    # 可能な範囲でdictに戻す
                    return json.dumps(self._convDict(value))
                except:
                    errormsg = 'Unexpected Error occured: {0} when serializing {1}'.format(str(sys.exc_info()[0]), str(value))
                    self.logger.warn(errormsg)
                    return value

            def _convDict(self, value):
                if isinstance(value, list):
                    elems = filter(lambda x: isinstance(x, list) and len(x) == 2, value)
                    if len(value) == len(elems):
                        return dict(map(lambda e: (e[0], self._convDict(e[1])), elems))
                    else:
                        return map(lambda x: self._convDict(x), value)
                else:
                    return value

        # 送信履歴の管理
        # 自分自身が送信したイベント・メッセージを、外部からきたメッセージと誤認しループすることを
        # 防止します。
        class Histories(object):
            def __init__(self, logger):
                import threading
                self.counts = {}
                self.lock = threading.Lock()
                self.logger = logger

            def put(self, key):
                with self.lock:
                    if key not in self.counts:
                        self.counts[key] = 1
                    else:
                        self.counts[key] += 1

            def contains(self, key):
                with self.lock:
                    for hkey, count in self.counts.items():
                        if hkey == key:
                            if count <= 1:
                                del self.counts[key]
                            else:
                                self.counts[key] = count - 1
                            return True
                    return False


        # ALMemoryの監視
        class Subscriber(object):
            def __init__(self, logger, fromMemory, fromMQTT, memory, client, targetKey, targetTopic, format):
                self.logger = logger
                self.fromMemory = fromMemory
                self.fromMQTT = fromMQTT
                self.format = format
                self.memory = memory
                self.client = client
                self.targetKey = targetKey
                self.targetTopic = targetTopic
                self.logger.debug("Subscribe: {}".format(self.targetKey))
                self.signal = memory.subscriber(self.targetKey).signal
                self.valueId = self.signal.connect(self.onValue)

            def onValue(self, value):
                import qi
                if not self.fromMQTT.contains(self.targetKey):
                    # ALMemoryからきたキー・値とみなす
                    self.fromMemory.put(self.targetTopic)
                    qi.async(self.publishMessage, value)
                else:
                    # MQTTからきたキー・値は無視する
                    self.logger.debug('Ignore event: {0}'.format(self.targetKey))

            def publishMessage(self, value):
                payload = self.format.convertALMemoryToMQTT(value)
                self.logger.debug('Publishing... {0}->{1}'.format(self.targetTopic, payload))
                self.client.publish(self.targetTopic.encode('utf8'), payload=payload)
                self.logger.debug('Published: {0}'.format(self.targetTopic))

            def disconnect(self):
                if self.valueId is not None:
                    self.logger.debug("Unsubscribe: {}".format(self.targetKey))
                    self.signal.disconnect(self.valueId)
                    self.signal = None
                    self.memory = None
                    self.logger = None
                    self.targetKey = None
                    self.valueId = None]]>
</content>
                                                                                        </script>
                                                                                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
                                                                                        <Output name="onConnected" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                                                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                                        <Parameter name="Host" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                                        <Parameter name="Port" inherits_from_parent="1" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="8" />
                                                                                        <Parameter name="Username" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                                                                                        <Parameter name="Password" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="10" />
                                                                                        <Parameter name="LibFile1" inherits_from_parent="0" content_type="4" value="/paho/__init__.py" default_value="" tooltip="" id="11" />
                                                                                        <Parameter name="LibFile2" inherits_from_parent="0" content_type="4" value="/paho/mqtt/__init__.py" default_value="" tooltip="" id="12" />
                                                                                        <Parameter name="LibFile3" inherits_from_parent="0" content_type="4" value="/paho/mqtt/client.py" default_value="" tooltip="" id="13" />
                                                                                        <Parameter name="LibFile4" inherits_from_parent="0" content_type="4" value="/paho/mqtt/publish.py" default_value="" tooltip="" id="14" />
                                                                                        <Parameter name="Key-Topic Bindings" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="15" />
                                                                                    </Box>
                                                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                                    <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
                                                                                    <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                                                                                    <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                                    <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="6" />
                                                                                </Diagram>
                                                                            </BehaviorKeyframe>
                                                                        </BehaviorLayer>
                                                                    </Timeline>
                                                                </Box>
                                                                <Box name="Assert Bang (2)" id="12" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="507">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Assert Not Bang (1)" id="13" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="684" y="616">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                </Box>
                                                                <Box name="Wait For Signals (1)" id="14" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1246" y="429">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (2)" id="15" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1428" y="360">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Wait For Signals (3)" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1359" y="79">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Link inputowner="3" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="6" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="5" />
                                                                <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="5" />
                                                                <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="6" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="5" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="4" />
                                                                <Link inputowner="14" indexofinput="3" outputowner="13" indexofoutput="5" />
                                                                <Link inputowner="15" indexofinput="2" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="15" indexofinput="3" outputowner="14" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="2" outputowner="6" indexofoutput="4" />
                                                                <Link inputowner="12" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="13" indexofinput="3" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="7" outputowner="1" indexofoutput="3" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="15" indexofoutput="4" />
                                                                <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="3" outputowner="11" indexofoutput="4" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="TestTwice" id="1" localization="8" tooltip="こちらに概要を記入" x="496" y="34">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="200" y="176">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="197" y="54">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="330" y="57">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="617" y="50">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1462" y="173">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1222" y="40">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="513" y="295">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1463" y="275">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="2" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1741" y="181">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Text Edit (1)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="799" y="48">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="1086" y="41">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Remove Data / Event" id="4" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="205" y="38">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Remove Data / Event (1)" id="2" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="70" y="40">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="TestRemove" id="3" localization="8" tooltip="こちらに概要を記入" x="622" y="31">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                                                <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Subscribe to Event" id="18" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="373" y="208">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        if isinstance(value, long):
            value = int(value)
        qi.async(self.onEvent, value)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                                    <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="" custom_choice="0" tooltip="" id="7" />
                                                                </Box>
                                                                <Box name="Wait (4)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="370" y="64">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Text Edit" id="20" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="503" y="67">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event" id="21" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="769" y="58">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Assert String" id="22" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1657" y="195">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="Test" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                                                </Box>
                                                                <Box name="Wait (5)" id="23" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="1448" y="63">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Box name="Counter" id="1" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="686" y="305">
                                                                    <bitmap>media/images/box/loop.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                                                    <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                                                    <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                                                    <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                                                    <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                                                    <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                                                    <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="50" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                                                </Box>
                                                                <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1658" y="297">
                                                                    <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                                    <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                                    <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                                    <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                                    <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                                                </Box>
                                                                <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1861" y="196">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                                    <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                                    <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                                                </Box>
                                                                <Box name="Text Edit (1)" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1025" y="71">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Test")]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <text>
                                                                            <![CDATA[Test]]>
</text>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                                                </Box>
                                                                <Box name="Raise Event (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="1312" y="64">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                                                </Box>
                                                                <Box name="Remove Data / Event" id="5" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="224" y="58">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1b/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Remove Data / Event (1)" id="6" localization="8" tooltip="Remove the given key from NAOqi&apos;s shared memory." x="89" y="60">
                                                                    <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.removeData(self.getParameter("key"))
        self.onStopped()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                                    <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="4" />
                                                                    <Parameter name="key" inherits_from_parent="0" content_type="3" value="MQTT/Group1a/Test" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="5" />
                                                                </Box>
                                                                <Box name="Wait" id="8" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="900" y="66">
                                                                    <bitmap>media/images/box/wait.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                                    <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                                    <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                                    <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                                                </Box>
                                                                <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="4" />
                                                                <Link inputowner="21" indexofinput="2" outputowner="20" indexofoutput="3" />
                                                                <Link inputowner="22" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="22" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="1" indexofinput="2" outputowner="18" indexofoutput="6" />
                                                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                                <Link inputowner="7" indexofinput="3" outputowner="23" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="22" indexofoutput="5" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="5" />
                                                                <Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                                                                <Link inputowner="23" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="3" />
                                                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="19" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                                <Link inputowner="8" indexofinput="2" outputowner="21" indexofoutput="4" />
                                                                <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="4" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="24" indexofoutput="4" />
                                            <Link inputowner="24" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="24" indexofoutput="5" />
                                            <Link inputowner="24" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" />
                        <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="3" indexofinput="5" outputowner="5" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="5" outputowner="5" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="3" />
                        <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="5" outputowner="5" indexofoutput="3" />
                        <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="10" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="5" outputowner="5" indexofoutput="3" />
                        <Link inputowner="10" indexofinput="5" outputowner="5" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
