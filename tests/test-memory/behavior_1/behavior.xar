<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Reset Test" id="1" localization="8" tooltip="テストに関する情報をリセットします。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="101" y="62">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        keys = [key for key in memory.getDataListName() if key.startswith("com_github_yacchin1205_pepper_web_boxes_test/")]
        for key in keys:
            memory.removeData(key)
        self.logger.info("Remove Keys: %s" % keys)
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" />
                        </Box>
                        <Box name="Report Test" id="5" localization="8" tooltip="テストに関する情報を報告します。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1333" y="57">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        memory = ALProxy("ALMemory")
        keyPrefix = "com_github_yacchin1205_pepper_web_boxes_test/"
        keys = [key for key in memory.getDataListName() if key.startswith(keyPrefix)]
        values = {}
        for key in keys:
            values[key[len(keyPrefix):]] = memory.getData(key)
        for key in keys:
            memory.removeData(key)

        failure = [key for (key, value) in values.items() if value == "Failure"]
        success = [key for (key, value) in values.items() if value == "Success"]
        self.logger.info("Test Result: %s" % values)
        if len(failure) + len(success) == 0:
            self.logger.error("No tests")
        elif len(failure) > 0:
            self.logger.error("Failure: %d, Success: %d" % (len(failure), len(success)))
        else:
            self.logger.info("Success: %d" % (len(success)))
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" />
                        </Box>
                        <Box name="Event String 1" id="8" localization="8" tooltip="こちらに概要を記入" x="243" y="62">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="461" y="297">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("test-value")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[test-value]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert String" id="7" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1100" y="144">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="test-value" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1383" y="47">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Single Event (1)" id="2" localization="8" tooltip="こちらに概要を記入" x="934" y="61">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey2" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="461" y="297">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("test-value")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[test-value]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert String" id="7" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1100" y="144">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="test-value" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="8" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1391" y="80">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="3" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Stop Event" id="3" localization="8" tooltip="こちらに概要を記入" x="1068" y="57">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="323" y="171">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="461" y="297">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("test-value")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[test-value]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="323" y="44">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Assert Not Bang (1)" id="8" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1094" y="169">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait (2)" id="7" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="165" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert String" id="10" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1097" y="43">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="test-value" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                            </Box>
                                            <Box name="Assert Bang" id="5" localization="8" tooltip="Bangされることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="763" y="114">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Wait For Signals" id="11" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1380" y="101">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="8" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="5" />
                                            <Link inputowner="11" indexofinput="3" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="3" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="3" outputowner="11" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Duplication" id="4" localization="8" tooltip="こちらに概要を記入" x="1195" y="57">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="495" y="299">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("test-value")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[test-value]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="76" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1383" y="47">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Wait (2)" id="8" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="242" y="294">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (3)" id="11" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="374" y="289">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang (1)" id="12" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="167">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="3" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="11" indexofinput="2" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="12" indexofoutput="5" />
                                            <Link inputowner="12" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Event Float" id="6" localization="8" tooltip="こちらに概要を記入" x="512" y="65">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1100" y="144">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="1.5" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1383" y="47">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Number Edit" id="8" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="528" y="313">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1.5)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>1.5</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Event String 2" id="7" localization="8" tooltip="こちらに概要を記入" x="376" y="62">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Text Edit" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="461" y="297">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("")]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <text>
                                                        <![CDATA[]]>
</text>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert String" id="7" localization="8" tooltip="Stringが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1100" y="144">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="3" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="出力されるべき文字列。" id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1383" y="47">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Event Long" id="9" localization="8" tooltip="こちらに概要を記入" x="651" y="64">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Number" id="7" localization="8" tooltip="Numberが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1100" y="144">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = None

    def onUnload(self):
        self.received = None

    def onInput_onInput(self, actual):
        self.received = actual

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received is None:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.received != self.getParameter("Expected"):
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (self.getParameter("Expected"), self.received))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="2" type_size="1" nature="1" inner="0" tooltip="String入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-1e+08" max="1e+08" tooltip="出力されるべき数値。" id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1383" y="47">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Number Edit" id="8" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="528" y="313">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(1)]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <number>1</number>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" />
                                                <Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="6" />
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="3" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Event LongList" id="10" localization="8" tooltip="こちらに概要を記入" x="791" y="63">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="Subscribe to Event_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="AssertString_onOutput" type="1" type_size="1" nature="1" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Subscribe to Event" id="2" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="312" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey1" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Raise Event" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="764" y="295">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey1" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="313" y="299">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Wait (1)" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="914" y="292">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Assert Not Bang" id="5" localization="8" tooltip="Bangされないことを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに入力があるとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1098" y="31">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.received = False

    def onUnload(self):
        self.received = False

    def onInput_onInput(self):
        self.received = True

    def onInput_onTest(self):
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure")
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="1" type_size="1" nature="1" inner="0" tooltip="Bang入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event (1)" id="1" localization="8" tooltip="Subscribes to an event in ALMemory.&#x0A;When an event is raised, the output is fired.&#x0A;&#x0A;The box is implemented using qi Framework.&#x0A;&#x0A;ALMemory中のイベントを監視します。監視対象のイベントが発火すると、onEvent出力が発火します。&#x0A;&#x0A;このボックスはqi Frameworkを利用して実装されています。&#x0A;&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="310" y="46">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        import threading
        self.lock = threading.RLock()

    def onLoad(self):
        with self.lock:
            self.targetKey = None
            self.valueId = None

    def onUnload(self):
        with self.lock:
            if self.targetKey and self.valueId:
                self.logger.debug("Unsubscribe: %s, id=%s" % (self.targetKey, self.valueId))
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                signal.disconnect(self.valueId)
                self.targetKey = None
                self.valueId = None

    def onInput_onStart(self):
        with self.lock:
            if not self.valueId:
                self.targetKey = self.getParameter('key')
                self.logger.debug("Subscribe: %s" % self.targetKey)
                memory = self.session().service('ALMemory')
                signal = memory.subscriber(self.targetKey).signal
                self.valueId = signal.connect(self.onValue)

    def onValue(self, value):
        import qi
        qi.async(self.onEvent, self._convQiSafe(value))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def _convQiSafe(self, value):
        if isinstance(value, list):
            return map(lambda x: self._convQiSafe(x), value)
        elif isinstance(value, dict):
            return dict(map(lambda k, v: (self._convQiSafe(k), self._convQiSafe(v)), value.items()))
        elif isinstance(value, long):
            return int(value)
        else:
            return value]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="TestNumberKey2" default_value="" custom_choice="0" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Wait For Signals" id="10" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="1383" y="47">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                                                <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                                                <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                                            </Box>
                                            <Box name="Array" id="4" localization="8" tooltip="" x="517" y="305">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped([1, 2, 3])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="3" />
                                            </Box>
                                            <Box name="Assert JSON" id="14" localization="8" tooltip="任意の形式のオブジェクトが出力されることを明言するためのボックスです。&#x0A;onTest入力がおこなわれた際に、onInputに予期した入力がないとエラーとなります。&#x0A;&#x0A;@source https://github.com/yacchin1205/pepper-web-boxes" x="1100" y="147">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.receivedValue = None
        self.received = False

    def onUnload(self):
        self.receivedValue = None
        self.received = False

    def onInput_onInput(self, actual):
        self.receivedValue = actual
        self.received = True

    def onInput_onTest(self):
        import json
        expected = json.loads(self.getParameter("Expected"))
        keyName = "com_github_yacchin1205_pepper_web_boxes_test/%s" % self.getName()
        memory = ALProxy("ALMemory")
        if not self.received:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: not received")
            self.onFailure()
        elif self.receivedValue != expected:
            memory.insertData(keyName, "Failure")
            self.logger.error("Failure: expected=%s but actual=%s" % (str(expected), str(self.receivedValue)))
            self.onFailure()
        else:
            memory.insertData(keyName, "Success")
            self.logger.info("Success")
            self.onOutput()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onInput" type="0" type_size="1" nature="1" inner="0" tooltip="入力を受け取ります。" id="2" />
                                                <Input name="onTest" type="1" type_size="1" nature="1" inner="0" tooltip="Inputに入力があったかをテストします。&#x0A;Inputに入力がなければエラー、入力があればonOutputを出力します。" id="3" />
                                                <Output name="onOutput" type="1" type_size="1" nature="2" inner="0" tooltip="テスト完了時に出力されます。" id="4" />
                                                <Output name="onFailure" type="1" type_size="1" nature="2" inner="0" tooltip="失敗時に出力されます。" id="5" />
                                                <Parameter name="Expected" inherits_from_parent="0" content_type="3" value="[1, 2, 3]" default_value="" custom_choice="0" tooltip="出力されるべきオブジェクトを定義するJSONデータ。" id="6" />
                                            </Box>
                                            <Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="14" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="3" outputowner="14" indexofoutput="5" />
                                            <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="3" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="3" />
                        <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
                        <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="3" />
                        <Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="3" />
                        <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="3" />
                        <Link inputowner="10" indexofinput="2" outputowner="9" indexofoutput="3" />
                        <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
